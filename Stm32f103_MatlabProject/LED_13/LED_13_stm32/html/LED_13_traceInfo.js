function RTW_rtwnameSIDMap() {
	this.rtwnameHashMap = new Array();
	this.sidHashMap = new Array();
	this.rtwnameHashMap["<Root>"] = {sid: "LED_13"};
	this.sidHashMap["LED_13"] = {rtwname: "<Root>"};
	this.rtwnameHashMap["<S1>"] = {sid: "LED_13:1"};
	this.sidHashMap["LED_13:1"] = {rtwname: "<S1>"};
	this.rtwnameHashMap["<S2>"] = {sid: "LED_13:3"};
	this.sidHashMap["LED_13:3"] = {rtwname: "<S2>"};
	this.rtwnameHashMap["<S3>"] = {sid: "LED_13:1:3"};
	this.sidHashMap["LED_13:1:3"] = {rtwname: "<S3>"};
	this.rtwnameHashMap["<S4>"] = {sid: "LED_13:1:5"};
	this.sidHashMap["LED_13:1:5"] = {rtwname: "<S4>"};
	this.rtwnameHashMap["<Root>/ADC_Read"] = {sid: "LED_13:10"};
	this.sidHashMap["LED_13:10"] = {rtwname: "<Root>/ADC_Read"};
	this.rtwnameHashMap["<Root>/Counter Limited"] = {sid: "LED_13:1"};
	this.sidHashMap["LED_13:1"] = {rtwname: "<Root>/Counter Limited"};
	this.rtwnameHashMap["<Root>/If"] = {sid: "LED_13:2"};
	this.sidHashMap["LED_13:2"] = {rtwname: "<Root>/If"};
	this.rtwnameHashMap["<Root>/If Action Subsystem"] = {sid: "LED_13:3"};
	this.sidHashMap["LED_13:3"] = {rtwname: "<Root>/If Action Subsystem"};
	this.rtwnameHashMap["<Root>/STM32_Config"] = {sid: "LED_13:7"};
	this.sidHashMap["LED_13:7"] = {rtwname: "<Root>/STM32_Config"};
	this.rtwnameHashMap["<Root>/Scope"] = {sid: "LED_13:11"};
	this.sidHashMap["LED_13:11"] = {rtwname: "<Root>/Scope"};
	this.rtwnameHashMap["<S1>/Data Type Propagation"] = {sid: "LED_13:1:1"};
	this.sidHashMap["LED_13:1:1"] = {rtwname: "<S1>/Data Type Propagation"};
	this.rtwnameHashMap["<S1>/Force to be scalar"] = {sid: "LED_13:1:2"};
	this.sidHashMap["LED_13:1:2"] = {rtwname: "<S1>/Force to be scalar"};
	this.rtwnameHashMap["<S1>/Increment Real World"] = {sid: "LED_13:1:3"};
	this.sidHashMap["LED_13:1:3"] = {rtwname: "<S1>/Increment Real World"};
	this.rtwnameHashMap["<S1>/Output"] = {sid: "LED_13:1:4"};
	this.sidHashMap["LED_13:1:4"] = {rtwname: "<S1>/Output"};
	this.rtwnameHashMap["<S1>/Wrap To Zero"] = {sid: "LED_13:1:5"};
	this.sidHashMap["LED_13:1:5"] = {rtwname: "<S1>/Wrap To Zero"};
	this.rtwnameHashMap["<S1>/y"] = {sid: "LED_13:1:6"};
	this.sidHashMap["LED_13:1:6"] = {rtwname: "<S1>/y"};
	this.rtwnameHashMap["<S2>/Action Port"] = {sid: "LED_13:4"};
	this.sidHashMap["LED_13:4"] = {rtwname: "<S2>/Action Port"};
	this.rtwnameHashMap["<S2>/GPIO_Write1"] = {sid: "LED_13:9"};
	this.sidHashMap["LED_13:9"] = {rtwname: "<S2>/GPIO_Write1"};
	this.rtwnameHashMap["<S3>/u"] = {sid: "LED_13:1:3:1"};
	this.sidHashMap["LED_13:1:3:1"] = {rtwname: "<S3>/u"};
	this.rtwnameHashMap["<S3>/FixPt Constant"] = {sid: "LED_13:1:3:2"};
	this.sidHashMap["LED_13:1:3:2"] = {rtwname: "<S3>/FixPt Constant"};
	this.rtwnameHashMap["<S3>/FixPt Data Type Duplicate"] = {sid: "LED_13:1:3:3"};
	this.sidHashMap["LED_13:1:3:3"] = {rtwname: "<S3>/FixPt Data Type Duplicate"};
	this.rtwnameHashMap["<S3>/FixPt Sum1"] = {sid: "LED_13:1:3:4"};
	this.sidHashMap["LED_13:1:3:4"] = {rtwname: "<S3>/FixPt Sum1"};
	this.rtwnameHashMap["<S3>/y"] = {sid: "LED_13:1:3:5"};
	this.sidHashMap["LED_13:1:3:5"] = {rtwname: "<S3>/y"};
	this.rtwnameHashMap["<S4>/U"] = {sid: "LED_13:1:5:1"};
	this.sidHashMap["LED_13:1:5:1"] = {rtwname: "<S4>/U"};
	this.rtwnameHashMap["<S4>/Constant"] = {sid: "LED_13:1:5:4"};
	this.sidHashMap["LED_13:1:5:4"] = {rtwname: "<S4>/Constant"};
	this.rtwnameHashMap["<S4>/FixPt Data Type Duplicate1"] = {sid: "LED_13:1:5:2"};
	this.sidHashMap["LED_13:1:5:2"] = {rtwname: "<S4>/FixPt Data Type Duplicate1"};
	this.rtwnameHashMap["<S4>/FixPt Switch"] = {sid: "LED_13:1:5:3"};
	this.sidHashMap["LED_13:1:5:3"] = {rtwname: "<S4>/FixPt Switch"};
	this.rtwnameHashMap["<S4>/Y"] = {sid: "LED_13:1:5:5"};
	this.sidHashMap["LED_13:1:5:5"] = {rtwname: "<S4>/Y"};
	this.getSID = function(rtwname) { return this.rtwnameHashMap[rtwname];}
	this.getRtwname = function(sid) { return this.sidHashMap[sid];}
}
RTW_rtwnameSIDMap.instance = new RTW_rtwnameSIDMap();
